==> qemu: Downloading or copying ISO
    qemu: Found already downloaded, initial checksum matched, no download needed: http://releases.ubuntu.com/14.04.5/ubuntu-14.04.5-server-amd64.iso
==> qemu: Creating hard drive...
==> qemu: Starting HTTP server on port 8452
==> qemu: Found port for communicator (SSH, WinRM, etc): 3714.
==> qemu: Looking for available port between 5900 and 6000 on 127.0.0.1
==> qemu: Starting VM, booting from CD-ROM
    qemu: The VM will be run headless, without a GUI. If you want to
    qemu: view the screen of the VM, connect via VNC without a password to
    qemu: vnc://127.0.0.1:5902
==> qemu: Overriding defaults Qemu arguments with QemuArgs...
==> qemu: Waiting 2s for boot...
==> qemu: Connecting to VM via VNC
==> qemu: Typing the boot command over VNC...
==> qemu: Waiting for SSH to become available...
==> qemu: Connected to SSH!
==> qemu: Provisioning with shell script: scripts/ubuntu/update.sh
    qemu: [sudo] password for vagrant: + export DEBIAN_FRONTEND=noninteractive
    qemu: + DEBIAN_FRONTEND=noninteractive
    qemu: + apt update
    qemu:
    qemu: WARNING: apt does not have a stable CLI interface yet. Use with caution in scripts.
    qemu:
    qemu: + apt -y upgrade
    qemu:
    qemu: WARNING: apt does not have a stable CLI interface yet. Use with caution in scripts.
    qemu:
    qemu: Extracting templates from packages: 100%
    qemu:
    qemu: Current default time zone: 'Etc/UTC'
    qemu: Local time is now:      Sat Feb 24 22:45:42 UTC 2018.
    qemu: Universal Time is now:  Sat Feb 24 22:45:42 UTC 2018.
    qemu: Run 'dpkg-reconfigure tzdata' if you wish to change it.
    qemu:
    qemu: Done.
    qemu:  * Starting AppArmor profiles
    qemu: Skipping profile in /etc/apparmor.d/disable: usr.sbin.rsyslogd
    qemu:    ...done.
    qemu:  * Reloading AppArmor profiles
    qemu: Skipping profile in /etc/apparmor.d/disable: usr.sbin.rsyslogd
    qemu:    ...done.
    qemu: update-rc.d: warning: default stop runlevel arguments (0 1 6) do not match rsync Default-Stop values (none)
    qemu: Running depmod.
    qemu: update-initramfs: deferring update (hook will be called later)
    qemu: Examining /etc/kernel/postinst.d.
    qemu: run-parts: executing /etc/kernel/postinst.d/apt-auto-removal 4.4.0-116-generic /boot/vmlinuz-4.4.0-116-generic
    qemu: run-parts: executing /etc/kernel/postinst.d/initramfs-tools 4.4.0-116-generic /boot/vmlinuz-4.4.0-116-generic
    qemu: update-initramfs: Generating /boot/initrd.img-4.4.0-116-generic
    qemu: run-parts: executing /etc/kernel/postinst.d/zz-update-grub 4.4.0-116-generic /boot/vmlinuz-4.4.0-116-generic
    qemu: Generating grub configuration file ...
    qemu: Warning: Setting GRUB_TIMEOUT to a non-zero value when GRUB_HIDDEN_TIMEOUT is set is no longer supported.
    qemu: Found linux image: /boot/vmlinuz-4.4.0-116-generic
    qemu: Found initrd image: /boot/initrd.img-4.4.0-116-generic
    qemu: Found linux image: /boot/vmlinuz-4.4.0-31-generic
    qemu: Found initrd image: /boot/initrd.img-4.4.0-31-generic
    qemu: done
    qemu: run-parts: executing /etc/kernel/postinst.d/apt-auto-removal 4.4.0-116-generic /boot/vmlinuz-4.4.0-116-generic
    qemu: run-parts: executing /etc/kernel/postinst.d/initramfs-tools 4.4.0-116-generic /boot/vmlinuz-4.4.0-116-generic
    qemu: update-initramfs: Generating /boot/initrd.img-4.4.0-116-generic
    qemu: run-parts: executing /etc/kernel/postinst.d/zz-update-grub 4.4.0-116-generic /boot/vmlinuz-4.4.0-116-generic
    qemu: Generating grub configuration file ...
    qemu: Warning: Setting GRUB_TIMEOUT to a non-zero value when GRUB_HIDDEN_TIMEOUT is set is no longer supported.
    qemu: Found linux image: /boot/vmlinuz-4.4.0-116-generic
    qemu: Found initrd image: /boot/initrd.img-4.4.0-116-generic
    qemu: Found linux image: /boot/vmlinuz-4.4.0-31-generic
    qemu: Found initrd image: /boot/initrd.img-4.4.0-31-generic
    qemu: done
    qemu: Skipping profile in /etc/apparmor.d/disable: usr.sbin.rsyslogd
==> qemu: Provisioning with shell script: scripts/ubuntu/disable_apt-daily.sh
    qemu: Disabling unattended upgrades
    qemu: [sudo] password for vagrant: + echo 'Disabling unattended upgrades'
    qemu: + cat
==> qemu: Provisioning with shell script: scripts/linux-common/vagrant.sh
    qemu: [sudo] password for vagrant: + date
    qemu: + SSH_USER=vagrant
    qemu: + SSH_USER_HOME=/home/vagrant
    qemu: + VAGRANT_INSECURE_KEY='ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key'
    qemu: + echo '==> Giving vagrant sudo powers'
    qemu: + echo 'vagrant        ALL=(ALL)       NOPASSWD: ALL'
    qemu: + echo '==> Installing vagrant key'
    qemu: ==> Giving vagrant sudo powers
    qemu: + '[' '!' -d /home/vagrant/.ssh ']'
    qemu: ==> Installing vagrant key
    qemu: + mkdir /home/vagrant/.ssh
    qemu: + chmod 700 /home/vagrant/.ssh
    qemu: + echo 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEA6NF8iallvQVp22WDkTkyrtvp9eWW6A8YVr+kz4TjGYe7gHzIw+niNltGEFHzD8+v1I2YJ6oXevct1YeS0o9HZyN1Q9qgCgzUFtdOKLv6IedplqoPkcmF0aYet2PkEDo3MlTBckFXPITAMzF8dJSIFo9D8HfdOV0IAdx4O7PtixWKn5y2hMNG0zQPyUecp4pzC6kivAIhyfHilFR61RGL+GPXQ2MWZWFYbAGjyiYJnAmCP3NOTd0jMZEnDkbUvxhMmBYSdETk1rRgm+R4LOzFUGaHqHDLKLX+FIPKcF96hrucXzcWyLbIbEgE98OHlnVYCzRdK8jlqm8tehUc9c9WhQ== vagrant insecure public key'
    qemu: + chmod 600 /home/vagrant/.ssh/authorized_keys
    qemu: + chown -R vagrant:vagrant /home/vagrant/.ssh
==> qemu: Provisioning with shell script: scripts/linux-common/cleanup.sh
    qemu: + SSH_USER=vagrant
    qemu: ==> Cleaning up udev rules
    qemu: + echo '==> Cleaning up udev rules'
    qemu: + rm -rf /dev/.udev/ /lib/udev/rules.d/75-persistent-net-generator.rules
    qemu: + service rsyslog stop
    qemu: + '[' -f /etc/os-release ']'
    qemu: + grep -iq debian /etc/os-release
    qemu: rsyslog stop/waiting
    qemu: ==> Cleaning up leftover dhcp leases
    qemu: + export DEBIAN_FRONTEND=noninteractive
    qemu: + DEBIAN_FRONTEND=noninteractive
    qemu: + echo 'pre-up sleep 2'
    qemu: + echo '==> Cleaning up leftover dhcp leases'
    qemu: + '[' -d /var/lib/dhcp3 ']'
    qemu: + '[' -d /var/lib/dhcp ']'
    qemu: + rm /var/lib/dhcp/dhclient.eth0.leases /var/lib/dhcp/dhclient.leases
    qemu: + apt-get -y autoremove --purge
    qemu: Reading package lists...
    qemu: Building dependency tree...
    qemu: Reading state information...
    qemu: 0 upgraded, 0 newly installed, 0 to remove and 0 not upgraded.
    qemu: + apt-get -y clean
    qemu: + apt-get -y autoclean
    qemu: Reading package lists...
    qemu: Building dependency tree...
    qemu: Reading state information...
    qemu: + echo '==> Cleaning up tmp'
    qemu: ==> Cleaning up tmp
    qemu: + rm -rf /tmp/script_7871.sh /tmp/ssh-YEPZthAtcc
    qemu: + unset HISTFILE
    qemu: + rm -f /root/.bash_history
    qemu: + rm -f /home/vagrant/.bash_history
    qemu: + find /var/log -type f
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: ==> Clearing last login information
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo -ne ''
    qemu: + read f
    qemu: + echo '==> Clearing last login information'
    qemu: + dd if=/dev/zero of=/EMPTY_FILE bs=1M
    qemu: dd exit code 1 is suppressed
    qemu: + echo 'dd exit code 1 is suppressed'
    qemu: + rm -f /EMPTY_FILE
    qemu: + sync
==> qemu: Gracefully halting virtual machine...
==> qemu: Converting hard drive...
==> qemu: Running post-processor: vagrant
==> qemu (vagrant): Creating Vagrant box for 'libvirt' provider
    qemu (vagrant): Copying from artifact: ubuntu-14.04-server-amd64-qemu/ubuntu-14.04-server-amd64
    qemu (vagrant): Using custom Vagrantfile: Vagrantfile-linux.template
    qemu (vagrant): Compressing: Vagrantfile
    qemu (vagrant): Compressing: box.img
    qemu (vagrant): Compressing: metadata.json
Build 'qemu' finished.

==> Builds finished. The artifacts of successful builds are:
--> qemu: 'libvirt' provider box: ubuntu-14.04-server-amd64-libvirt.box
