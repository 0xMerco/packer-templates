name: build

on:
  repository_dispatch:
  schedule:
    - cron: '0 2 1 * *'

jobs:
  prebuild:
    name: Prebuild actions
    runs-on: [self-hosted, linux, x64]
    env:
      PACKER_CACHE_DIR: /var/tmp/packer_cache

    steps:
      - name: Create Packer cache directory if not already exists
        run: test -d "${PACKER_CACHE_DIR}" || mkdir -v "${PACKER_CACHE_DIR}"

      - name: Create BOX_VERSION file
        run: |
          if [ ! -s "${PACKER_CACHE_DIR}/BOX_VERSION" ]; then
            BOX_VERSION="$(date +%Y%m%d).01"
            echo "*** Creating new file: ${PACKER_CACHE_DIR}/BOX_VERSION | ${BOX_VERSION}"
            echo "${BOX_VERSION}" > "${PACKER_CACHE_DIR}/BOX_VERSION"
          else
            echo "*** File [ ${PACKER_CACHE_DIR}/BOX_VERSION | $(cat ${PACKER_CACHE_DIR}/BOX_VERSION) ] already exists - using existing..."
          fi

##############
# libvirt
##############

  build-libvirt:
    name: "*"
    runs-on: [self-hosted, linux, x64]
    needs: prebuild
    env:
      PACKER_IMAGES_OUTPUT_DIR: /var/tmp/packer-templates-images
      PACKER_CACHE_DIR: /var/tmp/packer_cache
      LOGDIR: /var/tmp/packer-templates-logs
      VAGRANT_CLOUD_USER: peru
      VAGRANT_CLOUD_TOKEN: ${{ secrets.VAGRANT_CLOUD_TOKEN }}
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        stage:
          - windows-server-2012_r2-standard-x64-eval-libvirt
          - my_centos-7-x86_64-libvirt
          - my_ubuntu-18.04-server-amd64-libvirt
          - ubuntu-16.04-server-amd64-libvirt
          - ubuntu-18.04-server-amd64-libvirt
          - ubuntu-20.04-server-amd64-libvirt
          - ubuntu-20.04-desktop-amd64-libvirt
          - ubuntu-18.04-desktop-amd64-libvirt
          - my_windows-10-enterprise-x64-eval-libvirt
          - windows-10-enterprise-x64-eval-libvirt
          - windows-server-2016-standard-x64-eval-libvirt
          - windows-server-2019-datacenter-x64-eval-libvirt

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Build image - ${{ matrix.stage }}
        env:
          PACKER_IMAGES_OUTPUT_DIR: /var/tmp/packer-templates-images
          LOGDIR: /var/tmp/packer-templates-images
        run: |
          ln -sv "${PACKER_CACHE_DIR}" packer_cache
          ./build.sh ${{ matrix.stage }}

      - name: Check the created box image - ${{ matrix.stage }}
        env:
          LOGDIR: /var/tmp/packer-templates-images
          TMPDIR: /var/tmp/packer-templates-images
        run: ./vagrant_init_destroy_boxes.sh ${PACKER_IMAGES_OUTPUT_DIR}/${{ matrix.stage }}.box

      - name: Upload box to Vagrant Cloud - ${{ matrix.stage }}
        if: github.event_name == 'schedule' || ( github.event_name == 'repository_dispatch' && github.event.action == 'build_release_upload' )
        run: |
          export BOX_VERSION="$(cat ${PACKER_CACHE_DIR}/BOX_VERSION)"
          echo "*** Using BOX_VERSION=${BOX_VERSION} from file: ${PACKER_CACHE_DIR}/BOX_VERSION"
          ./upload_box_to_vagrantcloud.sh ${VAGRANT_CLOUD_USER}@${PACKER_IMAGES_OUTPUT_DIR}/${{ matrix.stage }}.box

      - name: Build log cleanup - ${{ matrix.stage }}
        run: if [ -s "${LOGDIR}/${{ matrix.stage }}-packer.log" ]; then rm -v "${LOGDIR}/${{ matrix.stage }}-packer.log"; fi

##############
# VirtualBox
##############

  build-virtualbox:
    name: "*"
    runs-on: [self-hosted, linux, x64]
    needs: build-libvirt
    env:
      PACKER_IMAGES_OUTPUT_DIR: /var/tmp/packer-templates-images
      PACKER_CACHE_DIR: /var/tmp/packer_cache
      LOGDIR: /var/tmp/packer-templates-logs
      VAGRANT_CLOUD_USER: peru
      VAGRANT_CLOUD_TOKEN: ${{ secrets.VAGRANT_CLOUD_TOKEN }}
    strategy:
      max-parallel: 2
      fail-fast: false
      matrix:
        stage:
          - windows-server-2012_r2-standard-x64-eval-virtualbox
          - my_centos-7-x86_64-virtualbox
          - my_ubuntu-20.04-server-amd64-virtualbox
          - ubuntu-16.04-server-amd64-virtualbox
          - ubuntu-18.04-server-amd64-virtualbox
          - ubuntu-20.04-server-amd64-virtualbox
          - ubuntu-18.04-desktop-amd64-virtualbox
          - ubuntu-20.04-desktop-amd64-virtualbox
          - my_windows-10-enterprise-x64-eval-virtualbox
          - windows-10-enterprise-x64-eval-virtualbox
          - windows-server-2016-standard-x64-eval-virtualbox
          - windows-server-2019-datacenter-x64-eval-virtualbox

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Build image - ${{ matrix.stage }}
        env:
          PACKER_IMAGES_OUTPUT_DIR: /var/tmp/packer-templates-images
          LOGDIR: /var/tmp/packer-templates-images
        run: |
          ln -sv "${PACKER_CACHE_DIR}" packer_cache
          ./build.sh ${{ matrix.stage }}

      - name: Check the created box image - ${{ matrix.stage }}
        env:
          LOGDIR: /var/tmp/packer-templates-images
          TMPDIR: /var/tmp/packer-templates-images
        run: ./vagrant_init_destroy_boxes.sh ${PACKER_IMAGES_OUTPUT_DIR}/${{ matrix.stage }}.box

      - name: Upload box to Vagrant Cloud - ${{ matrix.stage }}
        if: github.event_name == 'schedule' || ( github.event_name == 'repository_dispatch' && github.event.action == 'build_release_upload' )
        run: |
          export BOX_VERSION=$(cat "${PACKER_CACHE_DIR}/BOX_VERSION")
          echo "*** Using BOX_VERSION=${BOX_VERSION} from file: ${PACKER_CACHE_DIR}/BOX_VERSION"
          ./upload_box_to_vagrantcloud.sh ${VAGRANT_CLOUD_USER}@${PACKER_IMAGES_OUTPUT_DIR}/${{ matrix.stage }}.box

      - name: Build log cleanup - ${{ matrix.stage }}
        run: if [ -s "${LOGDIR}/${{ matrix.stage }}-packer.log" ]; then rm -v "${LOGDIR}/${{ matrix.stage }}-packer.log"; fi

  clean_check_versions:
    needs: build-virtualbox
    runs-on: ubuntu-18.04
    env:
      VAGRANT_CLOUD_USER: peru
      VAGRANT_CLOUD_TOKEN: ${{ secrets.VAGRANT_CLOUD_TOKEN }}
    steps:
      - name: Remove old versions
        run: |
          for NAME in ubuntu-18.04-desktop-amd64 ubuntu-{18.04,16.04}-server-amd64 my_ubuntu-18.04-server-amd64 my_centos-7-x86_64 my_windows-10-enterprise-x64-eval windows-{server-{{2016,2012_r2}-standard,2019-datacenter},10-enterprise}-x64-eval; do
            OLD_VERSIONS=$(curl -s "https://app.vagrantup.com/api/v1/box/${VAGRANT_CLOUD_USER}/${NAME}" | jq -r '.current_version.version as $current_version | .versions[] | select (.version != $current_version) .version')
            for VERSION in ${OLD_VERSIONS}; do
              echo "*** Removing box version: https://vagrantcloud.com/api/v1/box/${VAGRANT_CLOUD_USER}/${NAME}/version/${VERSION}"
              curl -s "https://app.vagrantup.com/api/v1/box/${VAGRANT_CLOUD_USER}/${NAME}/version/${VERSION}" -X DELETE -d "access_token=${VAGRANT_CLOUD_TOKEN}" -o /dev/null
            done
          done

      - name: Verify if the boxes are avaiable on the Vagrant Cloud
        run: |
          for NAME in ubuntu-{20.04,18.04}-desktop-amd64 ubuntu-{20.04,18.04,16.04}-server-amd64 my_ubuntu-20.04-server-amd64 my_centos-7-x86_64 my_windows-10-enterprise-x64-eval windows-{server-{{2016,2012_r2}-standard,2019-datacenter},10-enterprise}-x64-eval; do
            for VAGRANT_PROVIDER in virtualbox libvirt; do
              CURRENT_VERSION=$(curl -s https://app.vagrantup.com/api/v1/box/peru/${NAME} | jq -r ".current_version.version")
              CHECKSUM=$(curl https://app.vagrantup.com/api/v1/box/peru/${NAME} | jq -r ".current_version.providers[] | select (.name == \"${VAGRANT_PROVIDER}\") .checksum")
              URL="https://app.vagrantup.com/peru/boxes/${NAME}/versions/${CURRENT_VERSION}/providers/${VAGRANT_PROVIDER}.box"
              echo "*** ${URL} | ${CHECKSUM}"
              if ! curl -L --fail --silent --head --output /dev/null "${URL}"; then
                echo "* URL \"${URL}\" is not accessible !"
                exit 1
              fi
              if [ $(curl -s https://app.vagrantup.com/peru/boxes/${NAME} | jq '.versions | length') != "1" ]; then
                echo "* Too many versions for: https://app.vagrantup.com/peru/boxes/${NAME} !"
                exit 2
              fi
            done
          done

  cleanup:
    needs: clean_check_versions
    name: Cleanup
    runs-on: [self-hosted, linux, x64]
    env:
      PACKER_IMAGES_OUTPUT_DIR: /var/tmp/packer-templates-images
      PACKER_CACHE_DIR: /var/tmp/packer_cache
      LOGDIR: /var/tmp/packer-templates-images
      VAGRANT_TMP: /var/tmp/packer-templates-images
    steps:
      - name: Cleanup
        run: |
          rm -v "${PACKER_CACHE_DIR}/BOX_VERSION"
          rm -v ${PACKER_IMAGES_OUTPUT_DIR}/*.box
          rm -v ${LOGDIR}/*.log
          rmdir -v "${PACKER_IMAGES_OUTPUT_DIR}" "${LOGDIR}" "${VAGRANT_TMP}" || true
